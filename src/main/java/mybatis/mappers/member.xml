<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.boot.dao.MemberDAO">

	<resultMap id="memberMap" type="Member">
		  <result property="uid" column="memberid" />
    </resultMap>
    
    <!-- 아이디 존재 여부 -->
	<select id="isExistUid" parameterType="java.util.Map" statementType="CALLABLE">
        {call exist_uid(
        				#{uid}
        				, #{p_result, jdbcType=VARCHAR, mode=OUT}
        )}
    </select>
    <!-- 멤버 추가하기 -->
	<insert id="addMember" parameterType="java.util.Map" statementType="CALLABLE">
        {call add_member(
        				#{member.uid}
				        , #{member.name}
				        , #{member.pwd}
				        , #{member.age}
				        , #{member.phone}
				        , #{member.address}
				        , #{member.gender}
				        , #{member.email}
				        , #{p_result, jdbcType=INTEGER, mode=OUT}
        )}
    </insert>
    <!-- 멤버 찾아오기 -->
	<select id="getMember" parameterType="java.util.Map" statementType="CALLABLE">
        {call get_member(
        				#{uid}
        				, #{v_cursor, jdbcType=CURSOR, mode=OUT, resultMap=memberMap}
        )}
    </select>
    <!-- 멤버 삭제하기 -->
    <delete id="removeMember" statementType="CALLABLE">
    	{call remove_member(
    						#{uid}
    	)}
    </delete>
    <!-- 아이디 찾기 -->	
    <select id="findIDMember" parameterType="java.util.Map" statementType="CALLABLE">
    	{call find_id_member(
					    	#{name}
					    	,#{phone}
					    	,#{v_cursor, jdbcType=CURSOR, mode=OUT, javaType=java.sql.ResultSet, resultMap=memberMap}
    	)}
    </select>
    <!-- 멤버 정보 수정하기 -->
    <update id="updateMember" parameterType="java.util.Map" statementType="CALLABLE">
    	{call update_member(
					    	#{member.name}
					    	,#{member.pwd}
					    	,#{member.age}
					    	,#{member.phone}
					    	,#{member.address}
					    	,#{member.gender}
					    	,#{member.email}
					    	,#{member.uid}
					    	
    	)}
    
    </update>
    <!-- 전체 멤버의 개수 구하기 -->
    <select id="getTotalCount" parameterType="java.util.Map" statementType="CALLABLE">
    	{call get_total_count(
						    	#{searchTitle}
						    	,#{p_cnt, jdbcType=INTEGER, mode=OUT}
    	)}
    </select>
    <!-- 페이징하고 전체 갯수 구하기 , 멤버 아이디를 검색 -->
    <select id="getMemberList" parameterType="java.util.Map" statementType="CALLABLE">
    	{call get_member_list(
						    	#{searchTitle}
						    	,#{startNo}
						    	,#{endNo}
						    	,#{v_cursor, jdbcType=CURSOR, mode=OUT, javaType=java.sql.ResultSet, resultMap=memberMap}
    	)}
    </select>
    <!-- 멤버 선택 삭제 -->
     <delete id="deleteMembers" statementType="CALLABLE">
    	{call delete_members(
    						#{members, jdbcType=ARRAY, typeHandler=com.project.boot.type.OracleStrArrTypeHandler, mode=IN}
    	)}
    </delete> 
   <!--   <delete id="deleteMembers">
    	delete from member where memberid in 
    	<foreach item="item" collection="array" open="(" separator="," close=")">
			#{item}
				
	
		</foreach>
    </delete>  -->
    <!-- 멤버 선택 삭제후에 삭제된 갯수만큼 다시 멤버 검색해오기 -->
    <select id="getMemberList2" parameterType="java.util.Map" statementType="CALLABLE">
    	{call get_member_list2(
						    	#{searchTitle}
						    	,#{startNo}
						    	,#{endNo}
						    	,#{v_cursor, jdbcType=CURSOR, mode=OUT, javaType=java.sql.ResultSet, resultMap=memberMap}
    	)}
    
    
    </select>
    
    
    
    
</mapper>